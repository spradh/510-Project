set.seed(1)
x=matrix(rnorm(20*2),ncol=2)
x
y=c(rep(-1,10),rep(1,10))
y
x[y==1,]=x[y==1,]+1
x
plot(x,col=(3-y))


dat=data.frame(x=x,y=as.factor(y))
View(dat)

svmfit=svm(y~.,data=dat,kernel="linear",cost=10,scale=FALSE)
plot(svmfit,dat)

svmfit$index
summary(svmfit)
#using smaller cost value
svmfit=svm(y~.,data=dat,kernel="linear",cost=0.10,scale=FALSE)
plot(svmfit,dat)

svmfit$index
summary(svmfit)

set.seed(1)
tune.out=tune(svm,y~.,data=dat,kernel="linear",ranges=list(cost=c(.001,.01,.1,1,5,10,100)))
summary(tune.out)

bestmod=tune.out$best.model
summary(bestmod)
#Test set

xtest=matrix(rnorm(20*2),ncol=2)
ytest=sample(c(-1,1),20, rep=TRUE)
xtest[ytest==1,]=xtest[ytest==1,]+1
testdat=data.frame(x=xtest,y=as.factor(ytest))

ypred=predict(bestmod,testdat)
table(predict=ypred,truth=testdat$y)

#changing cost
svmfit=svm(y~.,data=dat,kernel="linear",cost=.01,scale=FALSE)
ypred=predict(svmfit,testdat)
table(predict=ypred,truth=testdat$y)

x[y==1,]=x[y==1,]+.5
plot(x,col=(y+5)/2,pch=19)

dat=data.frame(x=x,y=as.factor(y))
svmfit=svm(y~.,data=dat,kernel="linear",cost=1e5,scale=FALSE)
summary(svmfit)
plot(svmfit,dat)
#decison boundary very narrow=> trying a lower cost value
svmfit=svm(y~.,data=dat,kernel="linear",cost=1,scale=FALSE)
summary(svmfit)
plot(svmfit,dat)

#multiclass SVM
set.seed(1)
x=rbind(x,matrix(rnorm(50*2),ncol=2))
x
y=c(y,rep(0,50))
y
x[y==0,2]=x[y==0,2]+2
dat=data.frame(x=x,y=as.factor(y))
par(mfrow=c(1,1))
plot(x,col=y+1)

svmfit=svm(y~.,data=dat,kernel="radial",cost=10,gamma=1)
plot(svmfit,dat)

